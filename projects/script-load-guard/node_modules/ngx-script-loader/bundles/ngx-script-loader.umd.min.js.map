{
  "version": 3,
  "file": "ngx-script-loader.umd.min.js",
  "sources": [
    "ng://ngx-script-loader/out/app/script-loader/script.service.ts",
    "ng://ngx-script-loader/out/app/script-loader/script.component.ts",
    "ng://ngx-script-loader/out/app/script-loader/script-loader.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/shareReplay';\n\ndeclare var document: any;\n\n@Injectable()\nexport class ScriptService {\n\n  private scriptsLoaders: {\n    [url: string]: Observable<Event>\n  } = {};\n\n  /**\n   *\n   * @param url Url of the external script to be loaded\n   * @param attributes Attribute list to be added to the script element\n   * @param targetEl Target element for the placing script tag. It can be a selector or a element reference\n   */\n  loadScript(url: string, attributes?: {[s: string]: string}, targetEl: HTMLElement | string = 'head' ): Observable<Event> {\n    if (url in this.scriptsLoaders) {\n      return this.scriptsLoaders[url];\n    }\n\n    this.scriptsLoaders[url] = Observable.create((observer) => {\n        const script: HTMLScriptElement = document.createElement('script');\n\n        if (attributes) {\n          for (const key in attributes) {\n            if (attributes.hasOwnProperty(key)) {\n              script.setAttribute(key, attributes[key]);\n            }\n          }\n        }\n\n        script.src = url;\n\n        script.onload = (event: Event) => {\n          observer.next(event);\n          observer.complete();\n        };\n\n        script.onerror = err => {\n          observer.error(err);\n        };\n\n        const targetElement: HTMLElement = typeof targetEl === 'string' ? document.querySelector(targetEl) : targetEl;\n        targetElement.appendChild(script);\n      })\n      .take(1)\n      .shareReplay(1);\n\n    return this.scriptsLoaders[url];\n  }\n\n}\n",
    "import { Component, OnInit, Input, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { ScriptService } from './script.service';\n\n@Component({\n  selector: 'ngx-script',\n  template: '',\n  styles: []\n})\nexport class ScriptComponent implements OnInit {\n\n  @Input()\n  src: string;\n\n  @Input()\n  attributes: {[key: string]: string} = {};\n\n  @Output() load = new EventEmitter<Event>();\n\n  @Output() error = new EventEmitter<Event>();\n\n  constructor(private scriptService: ScriptService, private element: ElementRef) {}\n\n  ngOnInit() {\n    this.scriptService.loadScript(this.src, this.attributes, this.element.nativeElement)\n      .subscribe((event) => {\n        this.load.emit(event);\n      }, (error) => {\n        this.error.emit(error);\n      });\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ScriptService } from './script.service';\nimport { CommonModule } from '@angular/common';\nimport { ScriptComponent } from './script.component';\n\n@NgModule({\n  declarations: [\n    ScriptComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ScriptComponent\n  ]\n})\nexport class ScriptLoaderModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScriptLoaderModule,\n      providers: [\n        ScriptService\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "ScriptService",
    "this",
    "scriptsLoaders",
    "prototype",
    "loadScript",
    "url",
    "attributes",
    "targetEl",
    "Observable",
    "create",
    "observer",
    "script",
    "document",
    "createElement",
    "key",
    "hasOwnProperty",
    "setAttribute",
    "src",
    "onload",
    "event",
    "next",
    "complete",
    "onerror",
    "err",
    "error",
    "querySelector",
    "appendChild",
    "take",
    "shareReplay",
    "type",
    "Injectable",
    "ScriptComponent",
    "scriptService",
    "element",
    "load",
    "EventEmitter",
    "ngOnInit",
    "_this",
    "nativeElement",
    "subscribe",
    "emit",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "ElementRef",
    "Input",
    "Output",
    "ScriptLoaderModule",
    "forRoot",
    "ngModule",
    "providers",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule",
    "exports"
  ],
  "mappings": "2jBAAA,IAAAA,EAAA,wBAYAC,KAAAC,eAAM,UAQJF,EAAFG,UAAAC,WAAE,SAAWC,EAAaC,EAAoCC,GAC1D,YADJ,IAAAA,IAA8DA,EAA9D,QACQF,KAAOJ,KAAKC,iBAIhBD,KAAKC,eAAeG,GAAOG,EAAAA,WAAWC,OAAO,SAACC,GAC1C,IAAMC,EAA4BC,SAASC,cAAc,UAEzD,GAAIP,EACF,IAAK,IAAMQ,KAAOR,EACZA,EAAWS,eAAeD,IAC5BH,EAAOK,aAAaF,EAAKR,EAAWQ,IAK1CH,EAAOM,IAAMZ,EAEbM,EAAOO,OAAS,SAACC,GACfT,EAASU,KAAKD,GACdT,EAASW,YAGXV,EAAOW,QAAU,SAAAC,GACfb,EAASc,MAAMD,KAGsC,iBAAbhB,EAAwBK,SAASa,cAAclB,GAAYA,GACvFmB,YAAYf,KAE3BgB,KAAK,GACLC,YAAY,IA7BN3B,KAAKC,eAAeG,MAtBjC,iBAOA,CAAAwB,KAACC,EAAAA,aCPD,IAAAC,EAAA,WAoBE,SAAFA,EAAsBC,EAAsCC,GAAtChC,KAAtB+B,cAAsBA,EAAsC/B,KAA5DgC,QAA4DA,EAN5DhC,KAAAK,WAAwC,GAExCL,KAAAiC,KAAmB,IAAIC,EAAAA,aAEvBlC,KAAAuB,MAAoB,IAAIW,EAAAA,oBAItBJ,EAAF5B,UAAAiC,SAAE,WAAA,IAAFC,EAAApC,KACIA,KAAK+B,cAAc5B,WAAWH,KAAKgB,IAAKhB,KAAKK,WAAYL,KAAKgC,QAAQK,eACnEC,UAAU,SAACpB,GACVkB,EAAKH,KAAKM,KAAKrB,IACd,SAACK,GACFa,EAAKb,MAAMgB,KAAKhB,QA3BxB,iBAGA,CAAAK,KAACY,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,aACVC,SAAU,GACVC,OAAQ,0CALV,CAAAhB,KAAS7B,GADT,CAAA6B,KAAmCiB,EAAAA,gCAUnC7B,IAAA,CAAA,CAAAY,KAAGkB,EAAAA,QAGHzC,WAAA,CAAA,CAAAuB,KAAGkB,EAAAA,QAGHb,KAAA,CAAA,CAAAL,KAAGmB,EAAAA,SAEHxB,MAAA,CAAA,CAAAK,KAAGmB,EAAAA,UClBH,IAAAC,EAAA,WAAA,SAAAA,YAiBgBA,EAAhBC,QAAS,WACL,MAAO,CACLC,SAAUF,EACVG,UAAW,CACTpD,OArBR,iBAKA,CAAA6B,KAACwB,EAAAA,SAADX,KAAA,CAAU,CACRY,aAAc,CACZvB,GAEFwB,QAAS,CACPC,EAAAA,cAEFC,QAAS,CACP1B"
}
