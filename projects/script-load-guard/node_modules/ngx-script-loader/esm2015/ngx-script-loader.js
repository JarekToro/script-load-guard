import { Injectable, Component, Input, ElementRef, Output, EventEmitter, NgModule } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/shareReplay';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ScriptService {
    constructor() {
        this.scriptsLoaders = {};
    }
    /**
     *
     * @param {?} url Url of the external script to be loaded
     * @param {?=} attributes Attribute list to be added to the script element
     * @param {?=} targetEl Target element for the placing script tag. It can be a selector or a element reference
     * @return {?}
     */
    loadScript(url, attributes, targetEl = 'head') {
        if (url in this.scriptsLoaders) {
            return this.scriptsLoaders[url];
        }
        this.scriptsLoaders[url] = Observable.create((observer) => {
            const /** @type {?} */ script = document.createElement('script');
            if (attributes) {
                for (const /** @type {?} */ key in attributes) {
                    if (attributes.hasOwnProperty(key)) {
                        script.setAttribute(key, attributes[key]);
                    }
                }
            }
            script.src = url;
            script.onload = (event) => {
                observer.next(event);
                observer.complete();
            };
            script.onerror = err => {
                observer.error(err);
            };
            const /** @type {?} */ targetElement = typeof targetEl === 'string' ? document.querySelector(targetEl) : targetEl;
            targetElement.appendChild(script);
        })
            .take(1)
            .shareReplay(1);
        return this.scriptsLoaders[url];
    }
}
ScriptService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ScriptComponent {
    /**
     * @param {?} scriptService
     * @param {?} element
     */
    constructor(scriptService, element) {
        this.scriptService = scriptService;
        this.element = element;
        this.attributes = {};
        this.load = new EventEmitter();
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.scriptService.loadScript(this.src, this.attributes, this.element.nativeElement)
            .subscribe((event) => {
            this.load.emit(event);
        }, (error) => {
            this.error.emit(error);
        });
    }
}
ScriptComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-script',
                template: '',
                styles: []
            },] },
];
/** @nocollapse */
ScriptComponent.ctorParameters = () => [
    { type: ScriptService, },
    { type: ElementRef, },
];
ScriptComponent.propDecorators = {
    "src": [{ type: Input },],
    "attributes": [{ type: Input },],
    "load": [{ type: Output },],
    "error": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ScriptLoaderModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: ScriptLoaderModule,
            providers: [
                ScriptService
            ]
        };
    }
}
ScriptLoaderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ScriptComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    ScriptComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { ScriptService, ScriptComponent, ScriptLoaderModule };
//# sourceMappingURL=ngx-script-loader.js.map
